#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if .Values.apisix.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "apisix.fullname" . }}
  namespace: {{ .Release.Namespace }}
data:
  conf-default.yaml: |-
    {{- range $key, $value := .Values.apisix.configDefault }}
    {{ $key }}:
      {{- include "apisix.tplvalues.render" (dict "value" $value "context" $) | nindent 6 }}
    {{- end }}
  config.yaml: |-
    #
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #
    apisix:
      node_listen: {{ .Values.gateway.http.containerPort }}             # APISIX listening port
      enable_admin: {{ .Values.admin.enabled }}
      enable_admin_cors: {{ .Values.admin.cors }}
      {{- if or .Values.customPlugins.enabled .Values.apisix.luaModuleHook.enabled }}
      extra_lua_path: {{ .Values.customPlugins.luaPath }};{{ .Values.apisix.luaModuleHook.luaPath }}
      {{- end }}

      {{- if .Values.apisix.luaModuleHook.enabled }}
      lua_module_hook: {{ .Values.apisix.luaModuleHook.hookPoint | quote }}
      {{- end }}


      allow_admin:                  # http://nginx.org/en/docs/http/ngx_http_access_module.html#allow
      {{- if .Values.admin.allow.ipList }}
      {{- range $ips := .Values.admin.allow.ipList }}
        - {{ $ips }}
      {{- end }}
      {{- else }}
        - 0.0.0.0/0
      {{- end}}
      {{- if or (index .Values "ingress-controller" "enabled") .Values.dashboard.enabled  }}
        - 0.0.0.0/0
      {{- end}}
      #   - "::/64"
      {{- if .Values.admin.enabled }}
      port_admin: {{ .Values.admin.port }}
      {{- end }}

      # Default token when use API to call for Admin API.
      # *NOTE*: Highly recommended to modify this value to protect APISIX's Admin API.
      # Disabling this configuration item means that the Admin API does not
      # require any authentication.
      admin_key:
        # admin: can everything for configuration data
        - name: "admin"
          key: {{ .Values.admin.credentials.admin }}
          role: admin
        # viewer: only can view configuration data
        - name: "viewer"
          key: {{ .Values.admin.credentials.viewer }}
          role: viewer
      {{- if and .Values.gateway.stream.enabled (or (gt (len .Values.gateway.stream.tcp) 0) (gt (len .Values.gateway.stream.udp) 0)) }}
      stream_proxy:                 # TCP/UDP proxy
        only: {{ .Values.gateway.stream.only }}
        {{- if gt (len .Values.gateway.stream.tcp) 0 }}
        tcp:                        # TCP proxy port list
          {{- range .Values.gateway.stream.tcp }}
          - {{ . }}
          {{- end }}
        {{- end }}
        {{- if gt (len .Values.gateway.stream.udp) 0 }}
        udp:                        # UDP proxy port list
          {{- range .Values.gateway.stream.udp }}
          - {{ . }}
          {{- end }}
        {{- end }}
      {{- end }}
      # dns_resolver:
      #   {{- range $resolver := .Values.dns.resolvers }}
      #   - {{ $resolver }}
      #   {{- end }}
      dns_resolver_valid: {{.Values.dns.validity}}
      resolver_timeout: {{.Values.dns.timeout}}
      ssl:
        enable: {{ .Values.gateway.tls.enabled }}
        enable_http2: {{ .Values.gateway.tls.http2.enabled }}
        listen_port: {{ .Values.gateway.tls.containerPort }}
        {{- if and .Values.gateway.tls.enabled .Values.gateway.tls.existingCASecret }}
        ssl_trusted_certificate: "/usr/local/apisix/conf/ssl/{{ .Values.gateway.tls.certCAFilename }}"
        {{- end }}

    nginx_config:                     # config for render the template to genarate nginx.conf
      error_log: "{{ .Values.logs.errorLog }}"
      error_log_level: "{{ .Values.logs.errorLogLevel }}"         # warn,error
      http:
        enable_access_log: {{ .Values.logs.enableAccessLog }}
        {{- if .Values.logs.enableAccessLog }}
        access_log: "{{ .Values.logs.accessLog }}"
        access_log_format: "{{ .Values.logs.accessLogFormat }}"
        access_log_format_escape: {{ .Values.logs.accessLogFormatEscape }}
        {{- end }}
        {{- if .Values.apisix.customLuaSharedDicts }}
        custom_lua_shared_dict:              # add custom shared cache to nginx.conf
        {{- range $dict := .Values.apisix.customLuaSharedDicts }}
          {{ $dict.name }}: {{ $dict.size }}
        {{- end }}
        {{- end }}
      {{- if .Values.configurationSnippet.main }}
      main_configuration_snippet: {{- toYaml .Values.configurationSnippet.main | indent 6 }}
      {{- end }}
      {{- if .Values.configurationSnippet.httpStart }}
      http_configuration_snippet: {{- toYaml .Values.configurationSnippet.httpStart | indent 6 }}
      {{- end }}
      {{- if .Values.configurationSnippet.httpEnd }}
      http_end_configuration_snippet: {{- toYaml .Values.configurationSnippet.httpEnd | indent 6 }}
      {{- end }}
      {{- if .Values.configurationSnippet.httpSrv }}
      http_server_configuration_snippet: {{- toYaml .Values.configurationSnippet.httpSrv | indent 6 }}
      {{- end }}
      {{- if .Values.configurationSnippet.httpAdmin }}
      http_admin_configuration_snippet: {{ toYaml .Values.configurationSnippet.httpAdmin | indent 6 }}
      {{- end }}
      {{- if .Values.configurationSnippet.stream }}
      stream_configuration_snippet: {{- toYaml .Values.configurationSnippet.stream | indent 6 }}
      {{- end }}

    etcd:
    {{- if .Values.etcd.enabled }}
      host:                                 # it's possible to define multiple etcd hosts addresses of the same etcd cluster.
        - "http://{{ .Release.Name }}-etcd.{{ .Release.Namespace }}.svc.{{ .Values.etcd.clusterDomain }}:{{ .Values.etcd.service.port }}"
    {{- else }}
      host:                                 # it's possible to define multiple etcd hosts addresses of the same etcd cluster.
        {{- range $value := .Values.etcd.host }}
        - "{{ $value }}"             # multiple etcd address
        {{- end}}
    {{- end }}
      prefix: {{ .Values.etcd.prefix | quote }}     # apisix configurations prefix
      timeout: {{ .Values.etcd.timeout }}   # 30 seconds
      {{- if .Values.etcd.auth.rbac.enabled }}
      user: {{ .Values.etcd.auth.rbac.user | quote }}
      password: {{ .Values.etcd.auth.rbac.password | quote }}
      {{- end }}
      {{- if .Values.etcd.auth.tls.enabled }}
      tls:
        cert: "/etcd-ssl/{{ .Values.etcd.auth.tls.certFilename }}"
        key: "/etcd-ssl/{{ .Values.etcd.auth.tls.certKeyFilename }}"
        verify: {{ .Values.etcd.auth.tls.verify }}
        sni: "{{ .Values.etcd.auth.tls.sni }}"
      {{- end }}

    {{- if .Values.discovery.enabled }}
    discovery:
      {{- range $key, $value := .Values.discovery.registry }}
      {{ $key }}:
        {{- include "apisix.tplvalues.render" (dict "value" $value "context" $) | nindent 8 }}
      {{- end }}
    {{- end }}

    {{- if .Values.plugins }}
    plugins:                          # plugin list
    {{- range $plugin := .Values.plugins }}
      - {{ $plugin }}
    {{- end }}
    {{- if .Values.customPlugins.enabled }}
    {{- range $plugin := .Values.customPlugins.plugins }}
      - {{ $plugin.name }}
    {{- end }}
    {{- end }}
    {{- end }}
    stream_plugins:
    {{- range $plugin := .Values.stream_plugins }}
      - {{ $plugin }}
    {{- end }}

    {{- if or .Values.pluginAttrs .Values.customPlugins.enabled .Values.serviceMonitor.enabled}}
    plugin_attr:
    {{- if .Values.serviceMonitor.enabled }}
      prometheus:
        export_addr:
          ip: 0.0.0.0
          port: {{ .Values.serviceMonitor.containerPort }}
        export_uri: {{ .Values.serviceMonitor.path }}
        metric_prefix: {{ .Values.serviceMonitor.metricPrefix }}
    {{- end }}
    {{- if .Values.customPlugins.enabled }}
    {{- range $plugin := .Values.customPlugins.plugins }}
      {{ $plugin.name }}: {{- $plugin.attrs | toYaml | nindent 8 }}
    {{- end }}
    {{- end }}
    {{- if .Values.pluginAttrs }}
    {{- range $name, $attrs := .Values.pluginAttrs }}
      {{ $name}}: {{- $attrs | toYaml | nindent 8 }}
    {{- end }}
    {{- end }}
    {{- end }}
{{- end }}
